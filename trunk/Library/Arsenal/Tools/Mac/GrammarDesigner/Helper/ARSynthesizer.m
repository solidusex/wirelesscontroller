/* * Copyright (c) 2011 by Solidus * This file is part of Arsenal library tools source code. * * Permission to use, copy, modify, distribute and sell this software * and its documentation for any purpose is hereby granted without fee, * provided that the above copyright notice appear in all copies and * that both that copyright notice and this permission notice appear * in supporting documentation.It is provided "as is" without express  * or implied warranty. * */#import "ARThread.h"/**************************************事件*************************/@implementation AREvent-(id)init{		return [self initEvent : YES];}-(id)initEvent : (BOOL)is_auto{		self = [super init];				if(self)		{				cond = [[NSCondition alloc] init];				isAutoReset = is_auto;				state = NO;		}				return self;}-(void)dealloc{		[cond release];		[super dealloc];}-(void) set{		[cond lock];		state = YES;				[cond broadcast];				[cond unlock];}-(void) reset{		[cond lock];				state = NO;				[cond unlock];}-(void)	wait{		[cond lock];				while (!state) 		{				[cond wait];		}				if (isAutoReset)		{				state = NO;		}				[cond unlock];		}-(BOOL)	waitTimeout : (NSTimeInterval) milliseconds{		BOOL is_signaled = NO;		NSDate *pdate = [NSDate dateWithTimeIntervalSinceNow : milliseconds / (NSTimeInterval)1000];				[cond lock];						while (!state) 		{				is_signaled = [cond waitUntilDate : pdate];								if(!is_signaled)				{						break;				}		}				if (is_signaled && isAutoReset)		{				state = NO;		}						[cond unlock];				return is_signaled;}@end/**************************************读写锁*************************/@implementation ARRWLock-(id)	init{		self = [super init];				if(self)		{				if(pthread_rwlock_init(&rwLock, NULL) != 0)				{						@throw [ARSystemException exceptionWithReason : @"cannot create reader/writer lock "];				}		}				return (self);}-(void) dealloc{		pthread_rwlock_destroy(&rwLock);		[super dealloc];}-(void) readLock{		if(pthread_rwlock_rdlock(&rwLock) != 0)		{				@throw [ARSystemException exceptionWithReason : @"cannot perform read lock on reader/writer lock "];		}}-(BOOL) tryReadLock{		return 		pthread_rwlock_tryrdlock(&rwLock) == 0 ? YES : NO;}-(void)	writeLock{		if(pthread_rwlock_wrlock(&rwLock) != 0)		{				@throw [ARSystemException exceptionWithReason : @"cannot perform write lock on reader/writer lock "];		}}-(BOOL)	tryWriteLock{		return pthread_rwlock_wrlock(&rwLock) == 0 ? YES : NO;}-(void)	unLock{		if(pthread_rwlock_unlock(&rwLock) != 0)		{				@throw [ARSystemException exceptionWithReason : @"cannot unlock on reader/writer lock "];		}}@end