


%name    delim         :    "[ \r\n\t]"            ;
%name    comment    :    "/\*([^\*]|\*+[^\*/])*\*+/"    ;
%name    comment_line    :    "//[^\n]*\n"            ;
%name    digit        :    "[0-9]"            ;
%name    number        :    "{digit}+"            ;

%token    %skip         :    "{delim}+|{comment}+|{comment_line}+",1;


%code    pre_defined{:

    static void        AR_STDCALL on_free_node(psrNode_t *node, void *ctx)
    {
            
    }

    static arStatus_t        AR_STDCALL on_error(const psrToken_t *tok, const size_t expected[], size_t count, void *ctx)
    {
            wchar_t buf[256], tmp[128];
            AR_wcsncpy(tmp, tok->str, AR_MIN(tok->str_cnt, 128-1));
            tmp[AR_MIN(tok->str_cnt, 128-1)] = L'\0';
            AR_swprintf(buf, 512, L"Error token '%ls'", tmp);
            wprintf(L"%ls\r\n", buf);
            return AR_S_YES;
    }
    
    static const psrHandler_t    __g_handler = {on_error, on_free_node};

:};



%token    NUM        :     "{number}"    %value    "TOK_NUMBER"        %action default_leaf_handler        
            {:
		  psrRetVal_t	ret;
                AR_ASSERT(tok != NULL && tok->str_cnt > 0);
		  ret.status = AR_S_YES;
                switch(tok->term_val)
                {
                case TOK_NUMBER:
                {
                    int_t num;
                    AR_wtoi_s(tok->str, tok->str + tok->str_cnt, &num, 10);
                    ret.node = (psrNode_t*)num;
			return ret;
                }
                    break;
                case TOK_ADD:
                case TOK_MINUS:
                case TOK_MUL:
                case TOK_DIV:
                case TOK_MOD:
                case TOK_LP:
                case TOK_RP:
			ret.node = (psrNode_t*)tok->term_val;
			return ret;
                    break;
                default:
                    AR_ASSERT(false);
                    return ret;
                }
            :}
            ;

%token 	"+"        :    '"+"'        %value    "TOK_ADD"        %action default_leaf_handler        ;
%token		"-"        :    '"-"'        %value    "TOK_MINUS"        %action default_leaf_handler      ;
%token 	"*"        :    '"*"'        %value    "TOK_MUL"        %action default_leaf_handler        ;
%token 	"/"        :    '"/"'        %value    "TOK_DIV"        %action default_leaf_handler        ;
%token    "("        :    '"("'        %value    "TOK_LP"        %action default_leaf_handler          ;
%token    ")"        :    '")"'        %value    "TOK_RP"        %action default_leaf_handler          ;
%token    "%"        :    '"%"'        %value    "TOK_MOD"        %action default_leaf_handler         ;




%left        "+"    "-"        ;
%left        "*"    "/"    "%"    ;
%right     UMINUS            ;

E        :    E    "+"     E        %action    "on_calc"
        |    E    "-"    E        %action    "on_calc"
        |    E    "*"    E        %action    "on_calc"
        |    E    "/"    E        %action    "on_calc"
        |    E    "%"    E        %action    "on_calc"
        {:
		psrRetVal_t ret;
            int_t l, r;
            size_t op;
            AR_ASSERT(nodes != NULL && count == 3);
		ret.status = AR_S_YES;
            l = (int_t)nodes[0];
            op = (size_t)nodes[1];
            r = (int_t)nodes[2];
            switch(op)
            {
            case TOK_ADD:
			ret.node = (psrNode_t*)(l + r);
	             return ret;
            case TOK_MINUS:
                	ret.node =  (psrNode_t*)(l - r);
			return ret;
            case TOK_MUL:
			ret.node = (psrNode_t*)(l * r);
			return ret;
            case TOK_DIV:
            case TOK_MOD:
            {
                if(r == 0)
                {
			ret.status = AR_E_INVAL;
			ret.node = (psrNode_t*)0;
                    *(bool_t*)ctx = false;
                    return ret;
                }else
                {
                    ret.node = (psrNode_t*) (op == TOK_MOD ? (l % r) : (l / r));
			return ret;
                }
            }
            default:
                AR_ASSERT(false);
                return ret;
            }
        :}

        |    "("    E    ")"        %action        "auto_return_1"
        {:
		  psrRetVal_t ret = {AR_S_YES, (psrNode_t*)nodes[1]};
                return ret;

        :}
        |    "-"    E     %prec UMINUS    %action        "on_negative_num"
        {:
		psrRetVal_t ret;
		ret.status = AR_S_YES;

            int_t n;
            AR_ASSERT(nodes != NULL && count == 2);
            n = (int_t)nodes[1];
            ret.node = (psrNode_t*)-n;
		return ret;
        :}
        |    NUM        %action    NULL

	 |	"(" ")"	%action NULL
        ;








%code Calc{:



static arStatus_t calc(const wchar_t *input, int *result)
{
		lex_t *lex;
		lexMatch_t *match;
		lexToken_t		tok;
		psrGrammar_t	*grammar;
		const parser_t		*parser;
		psrContext_t *ctx;
		bool_t dump;
		int_t v = 0;
		arStatus_t status;
		AR_ASSERT(result != NULL);
		lex = __build_lex();
		grammar = __build_grammar(&__g_handler);
		parser = Parser_CreateParser(grammar, PARSER_LALR);
		dump = true;
		ctx = Parser_CreateContext(parser, (void*)&dump);


		match = Lex_CreateMatch(lex);

		Lex_ResetInput(match, input);

		status = AR_S_YES;
		
		while(status == AR_S_YES)
		{
				status = Lex_Match(match, &tok);

				if(status == AR_S_YES)
				{
						psrToken_t psr_tok;

						PARSER_TOTERMTOK(&tok, &psr_tok);
						
						status = Parser_AddToken(ctx, &psr_tok);
						
						if(status == AR_S_YES)
						{
								if(psr_tok.term_val == 0)
								{
										break;		
								}
						}else if(status == AR_S_NO)
						{
								continue;
						}else
						{
								goto END_POINT;
						}

				}else if(status == AR_S_NO)
				{
						AR_printf(L"Invalid Token == %ls\r\n", Lex_GetNextInput(match));
						continue;
				}else
				{
						goto END_POINT;
				}

				
		}
		
		
		
		if(status == AR_S_YES)
		{
				v = (int)Parser_GetResult(ctx);
		}else
		{
				printf("error expr\r\n");
		}

END_POINT:
		Lex_DestroyMatch(match);
		Lex_Destroy(lex);
		Parser_DestroyContext(ctx);
		Parser_DestroyParser(parser);
		Parser_DestroyGrammar(grammar);
		
		*result = v;
		return status;
}

 

:}    BTM

;







